# Count of Smaller Numbers After Self

class Solution {
public:
void merge(int low,int mid,int high,vector<int> & count,vector<pair<int,int>>& v){
    vector<pair<int,int>> temp(high-low+1);
    int i=low,j=mid+1,k=0;
    while(i<=mid && j<=high){
        if(v[i].first <= v[j].first){
            temp[k++] = v[j++];
        }
        else{
            count[v[i].second] += high-j+1;
            temp[k++] = v[i++];

        }
    }
    while(i<=mid) temp[k++] = v[i++];
    while(j<=high) temp[k++] = v[j++];

    for(int i=low;i<=high;i++)
    v[i] = temp[i-low];

}
void mergeSort(int low,int high,vector<int> & count,vector<pair<int,int>>& v){
    if(low<high){
        int mid=low+(high-low)/2;
        mergeSort(low,mid,count,v);
        mergeSort(mid+1,high,count,v);
        merge(low,mid,high,count,v);
    }
}
    vector<int> countSmaller(vector<int>& nums) {
        int n = nums.size();
        vector<pair<int,int>> v;
        for(int i=0;i<n;i++){
            v.push_back({nums[i],i});
        }
        vector<int> count(n,0);
        mergeSort(0,n-1,count,v);
        return count;
            }
};
